type Artist {
    _id: ID!
    firstName: String
    secondName: String
    middleName: String
    birthDate: String
    birthPlace: String
    country: String
    bands: [Band]
    instruments: [String]
}

input NewArtist {
    firstName: String!
    secondName: String!
    middleName: String
    birthDate: String
    birthPlace: String
    country: String!
    bands: [String]
    instruments: [String]
}

input UpdateArtist {
  _id: ID!
  firstName: String
  secondName: String
  middleName: String
  birthDate: String
  birthPlace: String
  country: String
  bands: [String]
  instruments: String
}

type Genre {
    _id: ID!
    name: String
    description: String
    country: String
    year: Int
}

type Artists {
  items: [Artist]
  limit: Int
  offset: Int
  total: Int
}

type DeleteData {
acknowledged: Boolean
  deletedCount: Int
}

type Query {
    getArtist(id:ID!):Artist
    getArtists(limit:Int, offset:Int):Artists
}

type Mutation {
    createArtist(newArtist:NewArtist):Artist
    updateArtist(id:ID!,updateArtist:UpdateArtist):Artist
    deleteArtist(id:ID!):DeleteData
}