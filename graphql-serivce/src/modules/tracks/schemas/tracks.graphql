type Track {
    id: ID!
    title: String!
    album: Album
    artists: [Artist]
    bands: [Band]
    duration: Int
    released: Int
    genres: [Genre]
}

input NewTrack {
    title: String!
    album: String
    artistsIds: [String]
    bandsIds: [String]
    duration: Int
    released: Int
    genresIds: [String]
}

input UpdateTrack {
    title: String
    album: String
    artistsIds: [String]
    bandsIds: [String]
    duration: Int
    released: Int
    genresIds: [String]
}

type Member {
  artist: Artist!
  instrument: String
  years: String
}
type Tracks {
  items: [Track]
  limit: Int
  offset: Int
  total: Int
}
type Query {
    track(id:ID!):Track
    tracks(limit:Int, offset:Int):Tracks
}

type Mutation {
    createTrack(createTrack:NewTrack):Track
    updateTrack(id:ID!,updateTrack:UpdateTrack):Track
    deleteTrack(id:ID!):DeleteData
}
